security:
    enable_authenticator_manager: true
    # https://symfony.com/doc/current/security.html#registering-the-user-hashing-passwords
    password_hashers:
        Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface: 'auto'
    # https://symfony.com/doc/current/security.html#loading-the-user-the-user-provider
    providers:
        # users_in_memory: { memory: null }
        app_user_provider:
            entity:
                class: App\Entity\User
                property: email
    firewalls:
        dev:
            pattern: ^/(_(profiler|wdt)|css|images|js)/
            security: false
        login:
            pattern: ^/api/login
            stateless: true
            json_login:
                check_path: /api/login_check
                success_handler: lexik_jwt_authentication.handler.authentication_success
                failure_handler: lexik_jwt_authentication.handler.authentication_failure

        api:
            pattern:   ^/api
            stateless: true
            jwt: ~

    # Easy way to control access for large sections of your site
    # Note: Only the *first* access control that matches will be used
    access_control:
        - { path: ^/api/login$, roles: PUBLIC_ACCESS }
        - { path: '^\/api\/users\/[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}\/address$', roles: ROLE_USER, methods: ['GET','PATCH','POST'] }
        - { path: ^/api/tournaments$, roles: ROLE_USER, method: 'GET' }
        - { path: '^\/api\/tournaments\/[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$', roles: ROLE_USER, method: 'GET' }
        - { path: '^\/api\/users\/[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}\/tournament-registrations$', roles: ROLE_USER, method: 'GET' }
        - { path: ^/api/tournament-registrations$, roles: ROLE_USER, method: 'POST' }
        - { path: '^\/api\/tournament-registrations\/[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}\/(accept|refuse)$', roles: ROLE_ADMIN, method: 'POST' }
        - { path: '^\/api\/tournament-registrations\/[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$', roles: ROLE_ADMIN, method: 'GET' }
        - { path: ^/api/tournament-registrations$, roles: ROLE_ADMIN, method: 'GET' }
        - { path: '^\/api\/users\/[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$', roles: ROLE_USER, methods: ['GET','PATCH'] }
        - { path: '^\/api\/users\/[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$', roles: ROLE_ADMIN, method: 'DELETE' }
        - { path: '^\/api\/users\/[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}\/image$', roles: ROLE_USER, methods: ['GET','POST'] }
        - { path: ^/api/users$, roles: PUBLIC_ACCESS, method: 'POST' }
        - { path: ^/api/users, roles: ROLE_ADMIN, method: 'GET' }
    
    role_hierarchy:
        ROLE_PLAYER: ROLE_USER
        ROLE_ADMIN: ROLE_PLAYER

when@test:
    security:
        password_hashers:
            # By default, password hashers are resource intensive and take time. This is
            # important to generate secure password hashes. In tests however, secure hashes
            # are not important, waste resources and increase test times. The following
            # reduces the work factor to the lowest possible values.
            Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface:
                algorithm: auto
                cost: 4 # Lowest possible value for bcrypt
                time_cost: 3 # Lowest possible value for argon
                memory_cost: 10 # Lowest possible value for argon
        firewalls:
            api:
                pattern:   ^/api
                security: false
